# Medh Web Platform - Project Rules

## Naming Conventions
1. Directories & Files
   - Use lowercase with dashes for directories (e.g., components/auth-wizard)
   - Use PascalCase for component files (e.g., CourseCard.tsx)
   - Use camelCase for utility files (e.g., apiUtils.ts)
   - Use kebab-case for page files (e.g., course-details.tsx)

2. Components & Variables
   - Use PascalCase for component names (e.g., CourseCard)
   - Use camelCase for variables and functions (e.g., isLoading, handleSubmit)
   - Use descriptive names that indicate purpose (e.g., courseFilterState)
   - Prefix boolean variables with is/has/should (e.g., isVisible, hasError)

3. Exports
   - Use named exports for components
   - Use default exports for pages
   - Use named exports for hooks and utilities

## Code Structure
1. Component Organization
   - Group by feature (e.g., courses, blogs, auth)
   - Separate presentational and container components
   - Keep components focused on a single responsibility
   - Use composition over inheritance

2. File Structure
   - Place components in src/components
   - Place pages in src/app
   - Place hooks in src/hooks
   - Place utilities in src/utils
   - Place API clients in src/apis

3. Import Order
   - React and Next.js imports
   - Third-party libraries
   - Components
   - Hooks and utilities
   - Types and interfaces
   - Constants and styles

## TypeScript Guidelines
1. Type Definitions
   - Define interfaces for component props
   - Use type for unions and primitives
   - Use enum for constants
   - Use generics for reusable types

2. Type Safety
   - Enable strict mode in tsconfig.json
   - Avoid using any
   - Use proper return types for functions
   - Use proper types for state

3. Type Naming
   - Prefix interfaces with I (e.g., ICourseProps)
   - Prefix types with T (e.g., TCourseType)
   - Prefix enums with E (e.g., ECourseStatus)

## Styling Guidelines
1. Tailwind CSS
   - Use utility classes for styling
   - Group related utilities with comments
   - Use custom theme extensions for repeated values
   - Use responsive prefixes (sm:, md:, lg:)

2. Component Styling
   - Use CSS modules for component-specific styles
   - Use Tailwind for layout and common styles
   - Use CSS variables for theme values
   - Use CSS-in-JS for dynamic styles

3. Responsive Design
   - Mobile-first approach
   - Use Tailwind breakpoints
   - Test on multiple devices
   - Use fluid typography

## Performance Patterns
1. Code Splitting
   - Use dynamic imports for large components
   - Use React.lazy for route-based splitting
   - Use Suspense for loading states
   - Use loading.tsx for page loading

2. Image Optimization
   - Use Next.js Image component
   - Specify width and height
   - Use proper formats (WebP, AVIF)
   - Use proper sizes for different devices

3. Data Fetching
   - Use SWR for data fetching
   - Use React Query for complex data
   - Use proper caching strategies
   - Use proper error handling

## Testing Guidelines
1. Unit Testing
   - Test components in isolation
   - Test hooks separately
   - Test utilities thoroughly
   - Use proper mocking

2. Integration Testing
   - Test component interactions
   - Test data flow
   - Test user interactions
   - Test error handling

3. E2E Testing
   - Test critical user flows
   - Test responsive design
   - Test accessibility
   - Test performance

## Documentation Guidelines
1. Code Documentation
   - Use JSDoc for functions
   - Use comments for complex logic
   - Document component props
   - Document types and interfaces

2. Project Documentation
   - Keep README up to date
   - Document setup instructions
   - Document deployment process
   - Document architecture decisions

3. API Documentation
   - Document API endpoints
   - Document request/response formats
   - Document error codes
   - Document authentication

## Git Workflow
1. Branch Naming
   - feature/ for new features
   - bugfix/ for bug fixes
   - hotfix/ for urgent fixes
   - release/ for releases

2. Commit Messages
   - Use conventional commits
   - Keep messages concise
   - Reference issues
   - Use present tense

3. Pull Requests
   - Keep PRs small and focused
   - Include tests
   - Update documentation
   - Request reviews

## Design System Guidelines (MEDH Professional Design System v2.0)
1. **Always use the design system utilities**
   - Import from `@/utils/designSystem` for all components
   - Use `buildComponent` and `buildAdvancedComponent` for consistent styling
   - Leverage `getGlassmorphism`, `getResponsive`, and semantic color functions

2. **Glassmorphism Usage**
   - Use glassmorphism sparingly (max 3-4 elements per view) for performance
   - Apply to overlays, modals, navigation bars, and hero sections
   - Avoid on text-heavy content or when accessibility is compromised
   - Always provide fallbacks: `bg-white/90 backdrop-blur-xl` with solid backup
   - Example: `className={buildAdvancedComponent.glassCard({ variant: 'primary', hover: true })}`

3. **Responsive Design Patterns**
   - **Mobile-First**: Start with 320px and progressively enhance
   - **Breakpoints**: xs(320px), sm(480px), md(768px), lg(1024px), xl(1280px), 2xl(1440px+)
   - **Device Support**: Mobile, tablets, foldables, ultrawide monitors
   - **Fluid Typography**: Use `getResponsive.fluidText()` for scalable text
   - **Touch Targets**: Minimum 44px Ã— 44px with adequate spacing
   - Example: `className="text-[clamp(1.5rem,4vw+1rem,3rem)]"`

4. **Component Construction**
   ```typescript
   // Professional card
   const cardClasses = buildComponent.card({ padding: 'desktop', shadow: true });
   
   // Glass card with hover
   const glassClasses = buildAdvancedComponent.glassCard({ variant: 'primary', hover: true });
   
   // Responsive button
   const buttonClasses = buildComponent.button('primary', 'md');
   
   // Glass button
   const glassButtonClasses = buildAdvancedComponent.glassButton({ size: 'lg' });
   ```

5. **Color System**
   - **Semantic Colors**: courses(blue), pricing(emerald), certification(amber), support(violet), enrollment(pink)
   - **Usage**: `getEnhancedSemanticColor('courses', 'light')` for standard colors
   - **Glass Variants**: `getEnhancedSemanticColor('courses', 'glass')` for glassmorphism
   - **Neutral Colors**: Use slate colors for professional look

6. **Layout Patterns**
   ```typescript
   // Section wrapper
   <div className="bg-slate-50 dark:bg-slate-950 min-h-screen">
     <div className="max-w-6xl mx-auto px-4 md:px-8 py-6 md:py-12">
       {/* Header card */}
       <div className={buildAdvancedComponent.glassCard({ variant: 'hero' })}>
         <h1 className={getResponsive.fluidText('heading')}>Title</h1>
       </div>
       
       {/* Content grid */}
       <div className={getResponsive.grid({ mobile: 1, tablet: 2, desktop: 3 })}>
         {/* Content */}
       </div>
     </div>
   </div>
   ```

7. **Animation Guidelines**
   - Respect `prefers-reduced-motion` for accessibility
   - Use `getAnimations.transition()` for consistent timing
   - Glassmorphism hover: `hover:bg-white/15 hover:-translate-y-1 hover:scale-[1.02]`
   - Micro-interactions: `hover:scale-95 active:scale-90` for buttons

8. **Accessibility Requirements**
   - Minimum contrast ratios: 4.5:1 for normal text, 3:1 for large text
   - Focus rings: `focus:ring-2 focus:ring-blue-500 focus:ring-offset-2`
   - Screen reader support: Use semantic HTML and ARIA labels
   - Touch targets: `min-h-[44px] min-w-[44px]` for interactive elements

9. **Performance Optimizations**
   - Use `backdrop-filter` sparingly (impacts performance on older devices)
   - Add `will-change: transform` only during animations, remove after
   - Provide graceful degradation for browsers without backdrop-filter support
   - Test on various devices and browsers, especially Safari iOS

10. **Implementation Examples**
    ```jsx
    // Professional page layout
    import { buildAdvancedComponent, getResponsive } from '@/utils/designSystem';
    
    function ProfessionalPage() {
      return (
        <div className="bg-slate-50 dark:bg-slate-950 min-h-screen">
          <div className="max-w-6xl mx-auto px-4 md:px-8 py-6 md:py-12">
            <div className={buildAdvancedComponent.glassCard({ variant: 'hero' })}>
              <h1 className={getResponsive.fluidText('heading')}>
                Professional Title
              </h1>
            </div>
          </div>
        </div>
      );
    }
    ```

## Deployment Guidelines
1. Environment Variables
   - Use .env.local for local development
   - Use .env.production for production
   - Use .env.example for documentation
   - Never commit sensitive values

2. Build Process
   - Run tests before build
   - Run linting before build
   - Run type checking before build
   - Use proper build flags

3. Deployment Process
   - Deploy to staging first
   - Run smoke tests
   - Deploy to production
   - Monitor for issues 