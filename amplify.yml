version: 1
frontend:
  phases:
    preBuild:
      commands:
        - echo "=== AWS Amplify Build Configuration ==="
        - echo "Available Node.js$(node -v)"
        - echo "Available npm$(npm -v)"
        - echo "Target Node.js$(cat .nvmrc 2>/dev/null || echo 'Not specified')"
        - echo "AWS Branch $AWS_BRANCH"
        - echo "Build ID $AWS_BUILD_ID"
        - echo ""
        
        # BYPASS SSM ISSUES - Set environment variables directly
        - |
          echo "=== Setting Environment Variables (Bypassing SSM) ==="
          export NODE_ENV="production"
          export NEXT_PUBLIC_API_URL="https://api.medh.co/api/v1"
          export NEXT_PUBLIC_APP_ENV="production"
          
          # Set fallback values for missing critical variables
          export JWT_SECRET="${JWT_SECRET:-fallback-jwt-secret-for-build-only-not-secure}"
          export API_KEY_SALT="${API_KEY_SALT:-fallback-salt}"
          export SESSION_SECRET="${SESSION_SECRET:-fallback-session-secret}"
          
          # Set build timeout and memory configurations
          export NEXT_TIMEOUT=1800000  # 30 minutes
          export NEXT_STATIC_EXPORT_TIMEOUT=1800000  # 30 minutes
          export NODE_OPTIONS="--max-old-space-size=16384 --no-warnings --max-semi-space-size=1024"
          export AMPLIFY_DISABLE_TIMEOUT=true
          export AMPLIFY_BUILD_TIMEOUT=3600  # 1 hour
          
          # Log what we're using (without showing actual secrets)
          echo "NODE_ENV: $NODE_ENV"
          echo "NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
          echo "JWT_SECRET: ${JWT_SECRET:0:10}... (length: ${#JWT_SECRET})"
          
          # Create .env file for build
          cat > .env << EOF
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=https://api.medh.co/api/v1
          NEXT_PUBLIC_APP_ENV=production
          JWT_SECRET=$JWT_SECRET
          API_KEY_SALT=$API_KEY_SALT
          SESSION_SECRET=$SESSION_SECRET
          EOF
          
          echo "✅ Environment variables set and .env file created"
        
        # Flexible Node.js version handling
        - |
          CURRENT_MAJOR=$(node -v | sed 's/v//' | cut -d. -f1)
          echo "Current Node.js major version v$CURRENT_MAJOR"
          
          # Check minimum compatibility (Node.js 18+)
          if [ "$CURRENT_MAJOR" -ge "18" ]; then
            echo "✅ Node.js version is compatible for Next.js (v$CURRENT_MAJOR >= v18)"
          else
            echo "❌ Node.js version too old (v$CURRENT_MAJOR < v18)"
            echo "This project requires Node.js 18 or higher"
            exit 1
          fi
          
          # Try to use specific version if possible
          if [ -f .nvmrc ] && command -v nvm >/dev/null 2>&1; then
            REQUIRED_VERSION=$(cat .nvmrc)
            echo ""
            echo "Attempting to use Node.js v$REQUIRED_VERSION via nvm..."
            nvm install $REQUIRED_VERSION && nvm use $REQUIRED_VERSION || {
              echo "⚠️  Failed to switch to v$REQUIRED_VERSION, continuing with v$CURRENT_MAJOR"
            }
          fi
        
        - echo ""
        - echo "Final environment"
        - "echo \"Node.js $(node -v)\""
        - "echo \"npm $(npm -v)\""
        - echo "Configuring npm..."
        - npm config set legacy-peer-deps true
        - npm config set audit-level moderate
        - npm config set fund false
        - npm config set update-notifier false
        - npm config set progress true
        
        # Clean up any potential lock file issues
        - echo ""
        - echo "=== Dependency Cleanup and Installation ==="
        - echo "Cleaning up potential dependency conflicts..."
        - rm -rf node_modules/.staging 2>/dev/null || true
        - rm -rf node_modules/.cache 2>/dev/null || true
        
        # Debug package.json and package-lock.json
        - echo "Checking package.json..."
        - ls -la package.json
        - echo "Checking package-lock.json..."
        - ls -la package-lock.json || echo "⚠️ No package-lock.json found"
        - echo "Node modules before install:"
        - ls -la node_modules/ 2>/dev/null || echo "No node_modules directory"
        
        # Clean install with better error handling
        - echo ""
        - echo "Installing dependencies with clean approach..."
        - |
          # Try npm ci first (faster and more reliable for production)
          if [ -f package-lock.json ]; then
            echo "Using npm ci for clean install..."
            npm ci --no-audit --prefer-offline --no-fund --verbose || {
              echo "npm ci failed, falling back to npm install..."
              rm -rf node_modules
              npm install --no-audit --prefer-offline --no-fund --verbose
            }
          else
            echo "No package-lock.json found, using npm install..."
            npm install --no-audit --prefer-offline --no-fund --verbose
          fi
          
          # Explicitly install critical Radix UI dependencies that might be missing
          echo "Ensuring critical Radix UI dependencies are installed..."
          npm install @radix-ui/react-avatar @radix-ui/react-progress --no-audit --prefer-offline --no-fund
        
        # Verify installation
        - echo ""
        - echo "=== Post-Install Verification ==="
        - echo "Node modules after install:"
        - ls -la node_modules/ | head -10
        - echo "Checking critical dependencies..."
        - npm list next react react-dom --depth=0 || echo "⚠️ Some critical dependencies missing"
        - echo "Checking Radix UI dependencies..."
        - npm list @radix-ui/react-avatar @radix-ui/react-progress --depth=0 || echo "⚠️ Some Radix UI dependencies missing"
    build:
      commands:
        - echo ""
        - echo "=== Starting Build Process ==="
        - chmod +x ./scripts/amplify-build.sh
        - ./scripts/amplify-build.sh
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/*
      - .npm/**/*
appRoot: .
